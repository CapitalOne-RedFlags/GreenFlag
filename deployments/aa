## **2️⃣ `template.yaml`**

### **Purpose**
The `template.yaml` file is an AWS CloudFormation template written using AWS Serverless Application Model (AWS SAM). It defines the infrastructure required for a transaction processing system, including AWS Lambda functions, an SQS queue, a DynamoDB table, and an SNS topic for fraud alerts.

### **File Path**
`deployments/template.yaml`

### **Key Components**

#### **Global Configuration**
```yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
```
- Specifies the AWS CloudFormation version.
- Uses the AWS Serverless Application Model (SAM) transform to simplify serverless application deployment.



#### **Resources**

##### **1. DynamoDB Table**
```yaml
TransactionsTable:
  Type: AWS::DynamoDB::Table
  Properties:
    TableName: !Ref DynamoDBTableName
    AttributeDefinitions:
      - AttributeName: AccountID
        AttributeType: S
      - AttributeName: TransactionID
        AttributeType: S
    KeySchema:
      - AttributeName: AccountID
        KeyType: HASH
      - AttributeName: TransactionID
        KeyType: RANGE
    BillingMode: PAY_PER_REQUEST
    StreamSpecification:
      StreamViewType: NEW_AND_OLD_IMAGES
```
- Defines a DynamoDB table to store transaction data.
- Uses `PAY_PER_REQUEST` billing mode for automatic scaling.
- Enables DynamoDB Streams to capture real-time changes.

##### **2. SNS Topic for Fraud Alerts**
```yaml
NotificationTopic:
  Type: AWS::SNS::Topic
  Properties:
    TopicName: FraudAlerts
```
- Creates an SNS topic for publishing fraud alerts detected in transactions.

##### **3. Transaction Processing Lambda Function**
```yaml
TransactionPipelineFunction:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: TransactionPipelineFunction
    CodeUri: ../
    Handler: bootstrap
    Runtime: provided.al2
    Environment:
      Variables:
        DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:DescribeTable
            Resource: !GetAtt TransactionsTable.Arn
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !Ref TransactionQueueARN
    Events:
      SQSEvent:
        Type: SQS
        Properties:
          Queue: !Ref TransactionQueueARN
          BatchSize: 10
          MaximumBatchingWindowInSeconds: 5
```
- This Lambda function processes transactions by reading messages from the SQS queue and updating DynamoDB.
- **`CodeUri: ../`** indicates that the Lambda function’s source code is located in the parent directory. This can be adjusted to point to the correct deployment package location.
- Uses `provided.al2` runtime (Amazon Linux 2) for custom compiled executables.
- Grants necessary permissions for SQS and DynamoDB interactions.
- **`Handler: bootstrap`** is necessary because AWS Lambda no longer supports `go1.x`, requiring a custom bootstrap executable for Go applications. The `bootstrap` file is the compiled Go binary and must be placed at the root of the deployment package (specified in `CodeUri`).

---

## **Conclusion**
- `template.yaml` defines a serverless architecture for processing transactions and detecting fraud.
- `CodeUri` specifies where the Lambda function source code is located. By default, it points to `../`, meaning the function’s deployment package is outside the `deployments/` directory.
- `Handler: bootstrap` is necessary because AWS removed support for `go1.x`. The `bootstrap` file is the compiled Go executable that AWS Lambda runs directly. This file must be included in the root of the deployment package.

